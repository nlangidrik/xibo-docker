# Xibo CMS Nginx Configuration
# 
# This configuration provides:
# - SSL/HTTPS support with Let's Encrypt
# - HTTP to HTTPS redirect
# - WebSocket support for XMR (real-time messaging)
# - Security headers
# - File upload optimization
# - Static file caching
#
# Instructions:
# 1. Copy this file to /etc/nginx/sites-available/xibo
# 2. Update YOUR-DOMAIN.COM with your actual domain
# 3. Update YOUR-EMAIL@EXAMPLE.COM in the certbot command
# 4. Enable the site: sudo ln -s /etc/nginx/sites-available/xibo /etc/nginx/sites-enabled/
# 5. Test config: sudo nginx -t
# 6. Get SSL certificate: sudo certbot --nginx -d your-domain.com -d www.your-domain.com
# 7. Reload Nginx: sudo systemctl reload nginx

# ============================================
# HTTP Server (Redirect to HTTPS)
# ============================================
server {
    listen 80;
    listen [::]:80;
    
    # REPLACE WITH YOUR DOMAIN
    server_name YOUR-DOMAIN.COM www.YOUR-DOMAIN.COM;
    
    # Allow Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# ============================================
# HTTPS Server (Main Configuration)
# ============================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    # REPLACE WITH YOUR DOMAIN
    server_name YOUR-DOMAIN.COM www.YOUR-DOMAIN.COM;
    
    # ============================================
    # SSL Configuration
    # ============================================
    # These paths will be auto-configured by Certbot
    # If using custom certificates, update these paths
    ssl_certificate /etc/letsencrypt/live/YOUR-DOMAIN.COM/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/YOUR-DOMAIN.COM/privkey.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    
    # SSL Session Settings
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP Stapling (improves SSL performance)
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/YOUR-DOMAIN.COM/chain.pem;
    
    # Use Google DNS for OCSP stapling
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # ============================================
    # Security Headers
    # ============================================
    # Prevent clickjacking attacks
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # Enable XSS protection in browsers
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Prevent MIME type sniffing
    add_header X-Content-Type-Options "nosniff" always;
    
    # Control referrer information
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Content Security Policy (adjust as needed for your content)
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'" always;
    
    # HTTP Strict Transport Security (HSTS)
    # Force browsers to use HTTPS for 1 year
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # ============================================
    # Upload Settings
    # ============================================
    # Maximum file upload size (adjust based on your media needs)
    # This should match or exceed CMS_PHP_UPLOAD_MAX_FILESIZE in config.env
    client_max_body_size 2G;
    
    # Timeouts for large file uploads
    client_body_timeout 300s;
    client_header_timeout 300s;
    
    # ============================================
    # Logging
    # ============================================
    access_log /var/log/nginx/xibo-access.log;
    error_log /var/log/nginx/xibo-error.log warn;
    
    # ============================================
    # Main Application Proxy
    # ============================================
    location / {
        # Proxy to Xibo Docker container (running on localhost:80)
        proxy_pass http://127.0.0.1:80;
        
        # Forward original request information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket support (required for real-time features)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Proxy timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Buffering settings (improves performance)
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # Don't pass these headers from the backend
        proxy_hide_header X-Powered-By;
    }
    
    # ============================================
    # XMR WebSocket Proxy (Real-time Messaging)
    # ============================================
    # XMR is Xibo's Message Relay for real-time communication with displays
    location /xmr {
        # Proxy to XMR container (running on localhost:9505)
        proxy_pass http://127.0.0.1:9505;
        
        # WebSocket configuration
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Forward headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Long timeouts for persistent WebSocket connections
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        
        # Disable buffering for WebSockets
        proxy_buffering off;
    }
    
    # ============================================
    # Static Files Optimization
    # ============================================
    # Cache static assets for better performance
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
        proxy_pass http://127.0.0.1:80;
        proxy_set_header Host $host;
        
        # Cache images for 1 year
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Security headers still apply
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    location ~* \.(css|js)$ {
        proxy_pass http://127.0.0.1:80;
        proxy_set_header Host $host;
        
        # Cache CSS/JS for 1 week
        expires 7d;
        add_header Cache-Control "public";
        
        # Security headers still apply
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    location ~* \.(mp4|avi|mov|wmv|flv|webm|mp3|wav|pdf|doc|docx|ppt|pptx)$ {
        proxy_pass http://127.0.0.1:80;
        proxy_set_header Host $host;
        
        # Cache media files for 30 days
        expires 30d;
        add_header Cache-Control "public";
        
        # Larger buffer for media files
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 8 256k;
    }
    
    # ============================================
    # Rate Limiting (Optional but Recommended)
    # ============================================
    # Uncomment these locations to enable rate limiting
    # First, add these to your main nginx.conf http block:
    #
    # limit_req_zone $binary_remote_addr zone=xibo_login:10m rate=5r/m;
    # limit_req_zone $binary_remote_addr zone=xibo_api:10m rate=30r/s;
    
    # Limit login attempts to prevent brute force attacks
    # location /login {
    #     limit_req zone=xibo_login burst=3 nodelay;
    #     proxy_pass http://127.0.0.1:80;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
    
    # Limit API requests
    # location /api {
    #     limit_req zone=xibo_api burst=50 nodelay;
    #     proxy_pass http://127.0.0.1:80;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
    
    # ============================================
    # Deny Access to Sensitive Files
    # ============================================
    # Block access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to backup files
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# ============================================
# INSTALLATION INSTRUCTIONS
# ============================================
#
# 1. Install Nginx and Certbot:
#    sudo apt update
#    sudo apt install -y nginx certbot python3-certbot-nginx
#
# 2. Copy this file:
#    sudo cp nginx-xibo-config.conf /etc/nginx/sites-available/xibo
#
# 3. Edit the file and replace YOUR-DOMAIN.COM with your actual domain:
#    sudo nano /etc/nginx/sites-available/xibo
#    # Replace all instances of YOUR-DOMAIN.COM with your domain
#
# 4. Enable the site:
#    sudo ln -s /etc/nginx/sites-available/xibo /etc/nginx/sites-enabled/
#
# 5. Test the configuration:
#    sudo nginx -t
#
# 6. If using default Nginx site, disable it:
#    sudo rm /etc/nginx/sites-enabled/default
#
# 7. Reload Nginx:
#    sudo systemctl reload nginx
#
# 8. Obtain SSL certificate:
#    sudo certbot --nginx -d your-domain.com -d www.your-domain.com --email YOUR-EMAIL@EXAMPLE.COM --agree-tos
#
# 9. Test automatic renewal:
#    sudo certbot renew --dry-run
#
# 10. Set up automatic renewal (should be done by Certbot automatically):
#     sudo crontab -e
#     # Add this line:
#     0 12 * * * /usr/bin/certbot renew --quiet
#
# 11. Verify HTTPS is working:
#     curl -I https://your-domain.com
#
# ============================================
# FIREWALL CONFIGURATION
# ============================================
#
# Ensure your firewall allows HTTPS traffic:
#    sudo ufw allow 'Nginx Full'
#    sudo ufw delete allow 'Nginx HTTP'  # Remove if HTTPS-only
#    sudo ufw status
#
# Or manually:
#    sudo ufw allow 80/tcp
#    sudo ufw allow 443/tcp
#
# ============================================
# TESTING YOUR CONFIGURATION
# ============================================
#
# 1. Test SSL configuration:
#    https://www.ssllabs.com/ssltest/analyze.html?d=your-domain.com
#
# 2. Test security headers:
#    curl -I https://your-domain.com
#
# 3. Test XMR WebSocket:
#    # Check browser console for WebSocket connections
#    # Or use online WebSocket tester
#
# 4. Test file upload:
#    # Upload a large media file in Xibo CMS
#
# ============================================
# TROUBLESHOOTING
# ============================================
#
# Issue: 502 Bad Gateway
# Solution: Check if Xibo is running: docker ps | grep xibo
#
# Issue: SSL certificate errors
# Solution: Verify certificate: sudo certbot certificates
#
# Issue: WebSocket connection fails
# Solution: Check XMR container: docker logs xibo-xmr-manual
#
# Issue: File upload fails
# Solution: Increase client_max_body_size in this config
#
# Issue: Slow performance
# Solution: Enable Nginx caching and adjust buffer sizes
#
# View Nginx error logs:
#    sudo tail -f /var/log/nginx/xibo-error.log
#
# View Nginx access logs:
#    sudo tail -f /var/log/nginx/xibo-access.log
#
# Reload Nginx after changes:
#    sudo nginx -t && sudo systemctl reload nginx

